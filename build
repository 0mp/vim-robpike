#! /bin/sh -
#
# This script generates a minimal Vim color scheme.
#
# ---
#
# Copyright (c) 2017-2020 Mateusz Piotrowski <0mp@FreeBSD.org>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

colorschemename='robpike'
maintainer='Mateusz Piotrowski'
version=0.10.0
background=light

generate_header() {
    cat << EOF
" Vim color scheme
"
" This file was generated automatically.
"
" Name: $colorschemename.vim
" Maintainer: $maintainer
" Version: $version

set background=$background
hi clear
if (exists('syntax_on'))
    syntax reset
endif

let g:colors_name = '$colorschemename'
EOF
}

link() {
    printf 'hi! link %s %s\n' $1 $2
}

hl() {
    printf 'hi %s' "$1"
    shift

    while [ $# -gt 0 ]; do
        case "$1" in
            guifg=*|ctermfg=*|guibg=*|ctermbg=*|gui=*|cterm=*|term=*|NONE)
                printf ' %s' "$1"
                shift
                ;;
            *)
                printf 'Invalid option "%s"\n' "$1" &1>2
                exit 1
        esac
    done
    echo
}

match() {
    printf 'match %s %s\n' "$1" "$2"
}

dobg() {
    if [ $# -gt 0 ]; then
        printf ' ctermbg=%s' $1
    fi
    shift
    if [ $# -gt 0 ]; then
        printf ' guibg=%s' $1
    fi
}

dofg() {
    if [ $# -gt 0 ]; then
        printf ' ctermfg=%s' $1
    fi
    shift
    if [ $# -gt 0 ]; then
        printf ' guifg=%s' $1
    fi
}

generate_header
echo

set -u

# Color definitions.
# http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim

color_ansi_red=1
color_ansi_green=2
color_ansi_blue=4
color_ansi_dark_white=7
color_ansi_bright_black=8
color_ansi_bright_blue=12
color_ansi_bright_magenta=13
color_ansi_bright_white=15

color_black='16 Black'
color_common_gray='254 #e4e4e4'
color_middle_gray='243 #737373'
color_bright_white='231 #ffffff'
color_light_green='LightGreen LightGreen'

# Command construction.

reset="NONE"
fg_reset="$(dofg NONE NONE)"
bg_reset="$(dobg NONE NONE)"
term_reset='cterm=NONE term=NONE'

bg_ansi_blue="$(dobg $color_ansi_blue)"
bg_ansi_bright_white="$(dobg $color_ansi_bright_white)"
bg_common_gray="$(dobg $color_common_gray)"
bg_light_green="$(dobg $color_light_green)"

fg_ansi_blue="$(dofg $color_ansi_blue)"
fg_ansi_green="$(dofg $color_ansi_green)"
fg_ansi_bright_blue="$(dofg $color_ansi_bright_blue)"
fg_ansi_bright_magenta="$(dofg $color_ansi_bright_magenta)"
fg_ansi_bright_black="$(dofg $color_ansi_bright_black)"
fg_ansi_dark_white="$(dofg $color_ansi_dark_white)"
fg_ansi_red="$(dofg $color_ansi_red)"
fg_black="$(dofg $color_black)"
fg_bright_white="$(dofg $color_bright_white)"
fg_middle_gray="$(dofg $color_middle_gray)"

bold="cterm=bold term=bold"
underline="cterm=underline term=underline"

# The core of the colorscheme build system.

hl Normal $reset
link Constant Normal
link Identifier Normal
link PreProc Normal
link Special Normal
link Statement Normal
link String Normal
link Type Normal

hl Comment $fg_ansi_green

hl ColorColumn $fg_black $bg_common_gray $term_reset
hl CursorLine $fg_reset $bg_reset $term_reset
hl CursorLineNr $fg_ansi_dark_white $bg_ansi_blue $bold
hl Folded $bg_reset
hl LineNr $reset

hl Error $fg_ansi_red $bg_reset
hl MatchParen $fg_ansi_red $bg_reset
hl Pmenu $fg_black $bg_common_gray
hl PmenuSel $fg_bright_white $bg_ansi_blue
hl Search $fg_ansi_bright_magenta $bg_reset
hl TabLineFill $bg_ansi_bright_white $term_reset
hl TabLineSel $bold
hl Title $fg_reset $bg_reset $bold
hl Todo $fg_reset $bg_reset $bold
hl Visual $fg_black $bg_light_green

hl SpecialKey $fg_ansi_bright_black $term_reset

hl SpellBad $fg_ansi_red $bg_reset $term_reset

hl gitcommitSummary $fg_ansi_bright_blue

# https://jbodah.github.io/blog/2016/11/01/positivenegative-lookaheadlookbehind-vim/
hl SpaceTrailingAnyTabs $underline
match SpaceTrailingAnyTabs '/\(^\t*\)\@<= \+$/'
